# -*- coding: utf-8 -*-
"""Breast cancer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q30JLET0zf8nlK4Ps0caf5UwribDQbxv
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.preprocessing import StandardScaler, OneHotEncoder, LabelEncoder, MinMaxScaler, MaxAbsScaler, RobustScaler
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC, LinearSVC

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/Dataset/Breast_Cancer.csv')

df.head()

df.tail()

df.info()

df.describe()

df.shape

df.isnull().sum()

df.duplicated().sum()

df.drop_duplicates(inplace=True)

df.columns

df.select_dtypes(include=np.number).columns

df.select_dtypes(include=object).columns

plt.figure(figsize=(10, 6))
sns.pairplot(df, hue='Status')
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(x='Status', y='Age', data=df)
plt.show()

plt.subplots(figsize=(8, 8))
df_2dhist = pd.DataFrame({
    x_label: grp['Marital Status'].value_counts()
    for x_label, grp in df.groupby('Race')
})
sns.heatmap(df_2dhist, cmap='viridis')
plt.xlabel('Race')
_ = plt.ylabel('Marital Status')

plt.figure(figsize=(10, 6))
df['Age'].plot(kind='hist', bins=20, title='Age')
plt.gca().spines[['top', 'right',]].set_visible(False)

plt.figure(figsize=(10, 6))
sns.boxplot(x='Status', y='Marital Status', data=df)
plt.show()

plt.figure(figsize=(10, 6))
df.plot(kind='scatter', x='Regional Node Examined', y='Reginol Node Positive', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

plt.figure(figsize=(10, 6))
df.plot(kind='scatter', x='Age', y='Tumor Size', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

def remove_outliers_iqr(df, column):
  Q1 = df[column].quantile(0.25)
  Q3 = df[column].quantile(0.75)
  IQR = Q3 - Q1
  lower_bound = Q1 - 1.5 * IQR
  upper_bound = Q3 + 1.5 * IQR
  df_no_outliers = df[(df[column] >= lower_bound) & (df[column] <= upper_bound)]
  return df_no_outliers

x = df.drop(columns=['Status'], axis = 1)
y = df['Status']

ohe = OneHotEncoder()
x = ohe.fit_transform(x)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

mm = MaxAbsScaler()
x_train = mm.fit_transform(x_train)
x_test = mm.transform(x_test)

models = {
    'lg': LogisticRegression(),
    'dt': DecisionTreeClassifier(),
    'rf': RandomForestClassifier(),
    'knn': KNeighborsClassifier(),
    'svm': SVC(),
    'ada': AdaBoostClassifier(),
    'gb': GradientBoostingClassifier(),
    'ln': LinearSVC()
}

model_names = list(models.keys())
accuracies = []
for model_name in model_names:
    model = models[model_name]
    if hasattr(x_train, 'toarray'):
        x_train_dense = x_train.toarray()
    else:
        x_train_dense = x_train

    model.fit(x_train_dense, y_train)
    if hasattr(x_test, 'toarray'):
        x_test_dense = x_test.toarray()
    else:
        x_test_dense = x_test

    y_pred = model.predict(x_test_dense)

    accuracy = accuracy_score(y_test, y_pred)*100
    accuracies.append(accuracy)
    print(f'{model_name} Accuracy: {accuracy}')
    print(classification_report(y_test, y_pred))
    print(confusion_matrix(y_test, y_pred))
    print('_'*80)

plt.figure(figsize=(10, 6))
plt.bar(model_names, accuracies, color='blue')
plt.xlabel("Algorithms")
plt.ylabel("Accuracy")
plt.title("Accuracy Comparison of Different Algorithms")
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

input_data = df.iloc[[0]]
input_data = input_data.drop(columns=['Status'], axis=1)

input_data_encoded = ohe.transform(input_data)
input_data_scaled = mm.transform(input_data_encoded)

for model_name in model_names:
    model = models[model_name]
    if hasattr(input_data_scaled, 'toarray'):
        input_data_dense = input_data_scaled.toarray()
    else:
        input_data_dense = input_data_scaled
    prediction = model.predict(input_data_dense)
    print(f'{model_name} Prediction: {prediction[0]}')

actual_status = df.iloc[0]['Status']
print(f'Actual Status: {actual_status}')

if prediction[0] == actual_status:
    print(f'{model_name} predicted correctly!')
else:
    print(f'{model_name} predicted incorrectly.')